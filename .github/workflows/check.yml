name: Check for updates
on:
  #schedule:
  #  - cron: '0 * * * *' # run every hour 每小时运行
  workflow_dispatch: # 允许手动运行工作流

jobs:
  listen_job:
    runs-on: ubuntu-latest # 指定运行工作流的虚拟环境
    steps:
      - name: Get latest release info # 定义一个步骤的名称
        uses: actions/github-script@v5 # 使用 actions/github-script 来运行 JavaScript 代码
        with:
          script: | # 编写 JavaScript 代码
            const repos = ['cinit/QAuxiliary', 'LuckyPray/XAutoDaily', 'KitsunePie/QQCleaner', 'fankes/TSBattery']; # 定义一个数组，存储要监听的仓库的名称
            // 将每个repo最后一次看到的发布标记存储在文件或环境变量中
            const lastSeen = {
              'cinit/QAuxiliary': 'v1.0.0',
              'LuckyPray/XAutoDaily': 'v1.0.0',
              'KitsunePie/QQCleaner': 'v1.0.0',
              'fankes/TSBattery': 'v1.0.0'
            }; # 定义一个对象，存储每个仓库最后一次看到的 release 标签
            for (const repo of repos) { # 遍历仓库数组
              const [owner, name] = repo.split('/'); # 从仓库名称中分离出所有者和名称
              const response = await github.repos.getLatestRelease({ # 调用 GitHub API 来获取最新的 release 信息
                owner,
                repo: name
              });
              console.log(`Latest release for ${repo}: ${response.data.tag_name}`); # 打印最新的 release 标签
              // 将最新发布的标签与上次看到的标签进行比较
              if (response.data.tag_name !== lastSeen[repo]) { # 如果最新的 release 标签和最后一次看到的不一样，说明有更新
                // Update the last seen release tag
                lastSeen[repo] = response.data.tag_name; # 更新最后一次看到的 release 标签
                // 向目标仓库发送repository_dispatch事件
                //await github.repos.createDispatchEvent({ # 调用 GitHub API 来发送一个 repository_dispatch 事件到目标仓库
                //  owner: 'Hakuin123', # 指定目标仓库的所有者
                //  repo: 'auto-LSP', # 指定目标仓库的名称
                //  event_type: 'new-release', # 指定事件类型，可以自定义
                //  await github.repos.createDispatchEvent({ # 调用 GitHub API 来发送一个 repository_dispatch 事件到目标仓库
                //    owner: 'Hakuin123', # 指定目标仓库的所有者
                //    repo: 'auto-LSP', # 指定目标仓库的名称
                //    event_type: 'new-release', # 指定事件类型，可以自定义
                //    client_payload: { # 添加 client_payload 参数
                //      repo, # 传递监听到更新的仓库名称
                //      release_name: response.data.name, # 传递最新的 release 名称
                //      release_url: response.data.html_url, # 传递最新的 release 链接
                //      release_tag: response.data.tag_name # 传递最新的 release 标签
                //    }
                //  });
                });
              }
            }
